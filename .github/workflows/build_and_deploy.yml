name: Build

on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'README.md'
    branches:
      - main
      - development
    tags:
      - v[0-9].[0-9].[0-9]*
  pull_request:
    branches:
      - main
      - development

jobs:
  build_linux:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - compiler_cpp: 'clang++'
          - compiler_cpp: 'g++'

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        id: install_non_qt_deps
        run: |
          sudo apt-get -qq install cmake ninja-build p7zip-full coreutils curl

      - name: Install gcc
        id: install_gcc
        run: |
          sudo apt-get -qq install gcc g++
        if: ${{ matrix.compiler_cpp == 'g++' }}

      - name: Install clang
        id: install_clang
        run: |
          sudo apt-get -qq install clang
        if: ${{ matrix.compiler_cpp == 'clang++' }}

      - name: Configure for gcc
        id: configure_for_gcc
        run: |
          mkdir $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(pwd)/installdir -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ ..
        if: ${{ matrix.compiler_cpp == 'g++' }}

      - name: Configure for clang
        id: configure_for_clang
        run: |
          mkdir $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(pwd)/installdir -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ..
        if: ${{ matrix.compiler_cpp == 'clang++' }}

      - name: Build
        id: build
        run: |
          cd $GITHUB_WORKSPACE/build
          cmake --build . --target all

      - name: Install
        id: install
        run: |
          cd $GITHUB_WORKSPACE/build
          cmake --build . --target install

      - name: Archive installed library
        id: archive
        run: |
          cd $GITHUB_WORKSPACE/build/installdir
          7z a gh_actions_testing_linux.zip *
        if: ${{ matrix.compiler_cpp == 'g++' }}

      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: gh_actions_testing_linux
          path: '${{ github.workspace }}/build/installdir/gh_actions_testing_linux.zip'
        if: ${{ matrix.compiler_cpp == 'g++' }}

  build_macos:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.16.x'

      - name: Setup ninja
        run: |
          mkdir -p $RUNNER_WORKSPACE/ninja
          cd $RUNNER_WORKSPACE/ninja
          curl -fsSL https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-mac.zip -o ninja-mac.zip
          unzip ninja-mac.zip
          echo "$RUNNER_WORKSPACE/ninja" >> $GITHUB_PATH

      - name: Configure
        id: configure
        run: |
          mkdir $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(pwd)/installdir ..

      - name: Build
        id: build
        run: |
          cd $GITHUB_WORKSPACE/build
          cmake --build . --target all

      - name: Install
        id: install
        run: |
          cd $GITHUB_WORKSPACE/build
          cmake --build . --target install

      - name: Archive installed library
        id: archive
        run: |
          cd $GITHUB_WORKSPACE/build/installdir
          zip -r gh_actions_testing_macos.zip .

      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: gh_actions_testing_macos
          path: '${{ github.workspace }}/build/installdir/gh_actions_testing_macos.zip'

  build_windows:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - target_arch: 'x86'
          - target_arch: 'x64'

    steps:
      - uses: actions/checkout@v3

      - name: Build and install x86
        id: build_test_install_x86
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86
          cd %GITHUB_WORKSPACE%
          md build
          cd build
          cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="%GITHUB_WORKSPACE%\build\installdir" ..
          cmake --build . --target all
          cmake --build . --target install
        if: ${{ matrix.target_arch == 'x86' }}
        shell: cmd

      - name: Build and install x64
        id: build_test_install_x64
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd %GITHUB_WORKSPACE%
          md build
          cd build
          cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="%GITHUB_WORKSPACE%\build\installdir" ..
          cmake --build . --target all
          cmake --build . --target install
        if: ${{ matrix.target_arch == 'x64' }}
        shell: cmd

      - name: Archive installed x86 binary
        id: archive_x86
        run: |
          cd %GITHUB_WORKSPACE%\build\installdir
          7z a gh_actions_testing_windows_x86.zip *
        if: ${{ matrix.target_arch == 'x86' }}
        shell: cmd

      - name: Archive installed x64 binary
        id: archive_x64
        run: |
          cd %GITHUB_WORKSPACE%\build\installdir
          7z a gh_actions_testing_windows_x64.zip *
        if: ${{ matrix.target_arch == 'x64' }}
        shell: cmd

      - name: Upload x86 artifact
        id: upload_artifact_x86
        uses: actions/upload-artifact@v3
        with:
          name: gh_actions_testing_windows_x86
          path: '${{ github.workspace }}\build\installdir\gh_actions_testing_windows_x86.zip'
        if: ${{ matrix.target_arch == 'x86' }}

      - name: Upload x64 artifact
        id: upload_artifact_x64
        uses: actions/upload-artifact@v3
        with:
          name: gh_actions_testing_windows_x64
          path: '${{ github.workspace }}\build\installdir\gh_actions_testing_windows_x64.zip'
        if: ${{ matrix.target_arch == 'x64' }}

  create_new_release:
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    steps:
      - name: Install dependencies
        id: install_deps
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key 23F3D4EA75716059
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          sudo apt update
          sudo apt install -qq gh
          sudo apt install -qq jq
          sudo apt install -qq p7zip

      - name: Delete previous continuous release
        id: delete_previous_continuous_release
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export BRANCH_NAME=$(echo $GITHUB_REF | sed 's/.*\/\(.*\)$/\1/')
          gh api /repos/d1vanov/quentier/releases/tags/continuous-${BRANCH_NAME} > /tmp/gh_get_release.json && exit_status=$? || exit_status=$?
          if [ "${exit_status}" = 0 ]; then
            export COMMIT_SHA=$(cat /tmp/gh_get_release.json | jq '.target_commitish')
            if ! [ "${COMMIT_SHA}" = "${GITHUB_SHA}" ]; then
              export PREVIOUS_CONTINUOUS_RELEASE_DELETED=0
              for i in {1..10}
              do
                echo "Trying to delete previous continuout release continuous-${BRANCH_NAME}"
                gh release delete continuous-${BRANCH_NAME} -y -R d1vanov/quentier;
                curl -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/d1vanov/quentier/git/refs/tags/continuous-${BRANCH_NAME};
                gh api /repos/d1vanov/quentier/releases/tags/continuous-${BRANCH_NAME} > /tmp/gh_get_release.json && exit_status=$? || exit_status=$?
                if [ "${exit_status}" != 0 ]; then
                  echo "It appears that previous continuous release is deleted now"
                  export PREVIOUS_CONTINUOUS_RELEASE_DELETED=1
                  break
                fi
                echo "Was able to receive information about the attempted to be deleted previous continuous release, waiting for 5 seconds before the next attempt"
                sleep 5
              done
              if [ "$PREVIOUS_CONTINUOUS_RELEASE_DELETED" != "1" ]; then
                echo "Failed to delete previous continuous release after several attempts!"
              fi
            fi
          fi
        shell: bash

      - name: Create new continuous main release
        id: create_new_continuous_main_release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create continuous-main --draft=false --prerelease --title "Continuous build (continuous-main)" --target $GITHUB_SHA -R d1vanov/gh-actions-testing

      - name: Create new continuous development release
        id: create_new_continuous_development_release
        if: ${{ github.ref == 'refs/heads/development' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create continuous-development --draft=false --prerelease --title "Continuous build (continuous-development)" --target $GITHUB_SHA -R d1vanov/gh-actions-testing

      - name: Create new tagged release
        id: create_new_tagged_release
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          gh release create "$GITHUB_REF" --draft=false --title "Release build ($GITHUB_REF)" --target $GITHUB_SHA -R d1vanov/gh-actions-testing

      - name: Download linux artifact
        id: download_linux_artifact
        uses: actions/download-artifact@v3
        with:
          name: gh_actions_testing_linux
          path: '${{ github.workspace }}/artifacts'

      - name: Download macOS artifact
        id: download_macos_artifact
        uses: actions/download-artifact@v3
        with:
          name: gh_actions_testing_macos
          path: '${{ github.workspace }}/artifacts'

      - name: Download Windows x86 artifact
        id: download_windows_x86_artifact
        uses: actions/download-artifact@v3
        with:
          name: gh_actions_testing_windows_x86
          path: '${{ github.workspace }}/artifacts'

      - name: Download Windows x64 artifact
        id: download_windows_x64_artifact
        uses: actions/download-artifact@v3
        with:
          name: gh_actions_testing_windows_x64
          path: '${{ github.workspace }}/artifacts'

      - name: Upload Linux artifact to continuous main release
        id: upload_linux_artifact_to_continuous_main_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_linux.zip /tmp/gh_actions_testing_linux_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-main /tmp/gh_actions_testing_linux_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash

      - name: Upload Linux artifact to continuous development release
        id: upload_linux_artifact_to_continuous_development_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_linux.zip /tmp/gh_actions_testing_linux_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-development /tmp/gh_actions_testing_linux_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/development' }}
        shell: bash

      - name: Upload macOS artifact to continuous main release
        id: upload_macos_artifact_to_continuous_main_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_macos.zip /tmp/gh_actions_testing_macos_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-main /tmp/gh_actions_testing_macos_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash

      - name: Upload macOS artifact to continuous development release
        id: upload_macos_artifact_to_continuous_development_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_macos.zip /tmp/gh_actions_testing_macos_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-development /tmp/gh_actions_testing_macos_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/development' }}
        shell: bash

      - name: Upload Windows x86 artifact to continuous main release
        id: upload_windows_x86_artifact_to_continuous_main_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x86.zip /tmp/gh_actions_testing_windows_x86.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-main /tmp/gh_actions_testing_windows_x86.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash

      - name: Upload Windows x86 artifact to continuous development release
        id: upload_windows_x86_artifact_to_continuous_development_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x86.zip /tmp/gh_actions_testing_windows_x86.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-development /tmp/gh_actions_testing_windows_x86.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/development' }}
        shell: bash

      - name: Upload Windows x64 artifact to continuous main release
        id: upload_windows_x64_artifact_to_continuous_main_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x64.zip /tmp/gh_actions_testing_windows_x64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-main /tmp/gh_actions_testing_windows_x64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash

      - name: Upload Windows x64 artifact to continuous development release
        id: upload_windows_x64_artifact_to_continuous_development_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x64.zip /tmp/gh_actions_testing_windows_x64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber continuous-development /tmp/gh_actions_testing_windows_x64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref == 'refs/heads/development' }}
        shell: bash

      - name: Ensure continuous main release is not a draft
        id: ensure_continuous_main_is_not_a_draft
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          gh release edit continuous-main --draft=false -R d1vanov/gh-actions-testing

      - name: Ensure continuous development release is not a draft
        id: ensure_continuous_development_is_not_a_draft
        if: ${{ github.ref == 'refs/heads/development' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          gh release edit continuous-development --draft=false -R d1vanov/gh-actions-testing

      - name: Upload Linux artifact to tagged release
        id: upload_linux_artifact_to_tagged_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG_NAME=$(echo $GITHUB_REF | sed 's/.*\/\(.*\)$/\1/')
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_linux.zip /tmp/gh_actions_testing_linux_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber ${TAG_NAME} /tmp/gh_actions_testing_linux_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        shell: bash

      - name: Upload macOS artifact to tagged release
        id: upload_macos_artifact_to_tagged_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG_NAME=$(echo $GITHUB_REF | sed 's/.*\/\(.*\)$/\1/')
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_macos.zip /tmp/gh_actions_testing_macos_x86_64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber ${TAG_NAME} /tmp/gh_actions_testing_macos_x86_64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        shell: bash

      - name: Upload Windows x86 artifact to tagged release
        id: upload_windows_x86_artifact_to_tagged_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG_NAME=$(echo $GITHUB_REF | sed 's/.*\/\(.*\)$/\1/')
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x86.zip /tmp/gh_actions_testing_windows_x86.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber ${TAG_NAME} /tmp/gh_actions_testing_windows_x86.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        shell: bash

      - name: Upload Windows x64 artifact to tagged release
        id: upload_windows_x64_artifact_to_tagged_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG_NAME=$(echo $GITHUB_REF | sed 's/.*\/\(.*\)$/\1/')
          mv $GITHUB_WORKSPACE/artifacts/gh_actions_testing_windows_x64.zip /tmp/gh_actions_testing_windows_x64.zip
          for i in 0..3
          do
            export UPLOADED=0
            gh release upload --clobber ${TAG_NAME} /tmp/gh_actions_testing_windows_x64.zip -R d1vanov/gh-actions-testing && export UPLOADED=1 || true
            if [ "$UPLOADED" = "1" ]; then
              break
            fi
          done
          if [ "$UPLOADED" != "1" ]; then
            echo "Failed to upload artifact to release"
            exit 1
          fi
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        shell: bash

      - name: Ensure tagged release is not a draft
        id: ensure_tagged_release_is_not_a_draft
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          gh release edit "$GITHUB_REF" --draft=false -R d1vanov/gh-actions-testing
